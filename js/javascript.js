








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































function pin(inp){
    console.log(inp)
}



const net = new brain.NeuralNetwork({ hiddenLayers: [8] });

const trainingData = [
    { input: [0,0], output: [0] },
    { input: [0,1], output: [1] },
    { input: [1,0], output: [1] },
    { input: [1,1], output: [0] },
    { input: [1,2], output: [1] },
    { input: [2,2], output: [0] },
    { input: [2,0], output: [1] },
    { input: [0,2], output: [1] }
];

//net.train(trainingData,
          //{
    //log: (error) => console.log(error),
    //logPeriod: 100
//}
  //  );

//const stats = net.train(trainingData)
//console.log(stats)
//console.log(net.run([0, 0]));
//console.log(net.run([1, 0]));
//console.log(net.run([0, 1]));
//console.log(net.run([1, 1]));
//console.log(net.run([1, 2]));
//console.log(net.run([2, 2]));
//console.log(net.run([0, 2]));
//console.log(net.run([2, 1]));


//0 1 1 0 1 0 1 1
//For picking the right one//For picking the right one//For picking the right one//For picking the right one//For picking the right one//For picking the right one//For picking the right one//For picking the right one//For picking the right one//For picking the right one//For picking the right one//For picking the right one//For picking the right one//For picking the right one//For picking the right one//For picking the right one//For picking the right one//For picking the right one//For picking the right one//For picking the right one//For picking the right one//For picking the right one
const rest = {
    "Dis" : "Mon",
    "Chees" : "Tues",
    "Mat" : "We",
    "Clap" : "Thurs",
    "Map" : "Fri",
    "Bap" : "Sa",
    "Slap" : "Sun",
    "Besttest" : "Go", 
    "Numerouno" : "Je",
};
const traindat = [];
const bins = {dweek :1}
for (let restnam in rest){
    const dweek = rest[restnam];
    traindat.push({
        input: {[dweek]: 1},
        output: {[restnam]: 1}
    })
;}

const newnet = new brain.NeuralNetwork({hiddenLayers: [32]})
const statsei = newnet.train(traindat);
//pin(statsei)

// For exact values

//pin(newnet.run({"Bap": 1}));

//For restaurant name

function resda(dweek){
    const result = newnet.run({[dweek]: 1 })
    let highestValue = 0;
    let highestrestnam = "";
    for (let restnam in result) {
        if (result[restnam] > highestValue){
            highestValue = result[restnam]
            highestrestnam = restnam
        }
    }
    return highestrestnam
}
// For the likeliest answer whent trying to select answer from training data for onput const resu = brain.likely(resda("Je"), newnet)

//pin(resda("Je"))

//For Counting//For Counting//For Counting//For Counting//For Counting//For Counting//For Counting//For Counting//For Counting//For Counting//For Counting//For Counting//For Counting//For Counting//For Counting//For Counting//For Counting//For Counting


const trainingddata = [

    [1,2,3,4,5,6],
    [6,5,4,3,2,1],
    [6,4,2],
    [5,3,1],
    [1,3,5],
    [2,4,6]
]

const netfrcount = new brain.recurrent.LSTMTimeStep();
//netfrcount.train(trainingddata)

//pin(netfrcount.run([1,3]))


function allneuralnets(number){
    newnet.train(trainingddata)
    netfrcount.train(trainingddata)
    net.train(trainingddata)
    pin(net.run([number]))
    pin(newnet.run([number]))
    pin(netfrcount.run([number]))
}

// For story writing // For story writing// For story writing// For story writing// For story writing// For story writing// For story writing// For story writing// For story writing// For story writing// For story writing// For story writing// For story writing// For story writing// For story writing

const newtraindata = [
"She has left him equally poise. He can either be drifted out by a single tear drop. Or he can stand still in a storm",
"Whenever she faces a mirror. She realizes that He was not telling a lie.",
"There was a thing, which she kept mystery from herself too.",
"I begin tucking him into bed and he tells me, “Daddy check for monsters under my bed.” I look underneath for his amusement and see him, another him, under the bed, staring back at me quivering and whispering, “Daddy there’s somebody on my bed."
];

const newnenet = new brain.recurrent.LSTM();
const neuranet = new brain.NeuralNetwork({hiddenLayers: [5]});

newnenet.train(newtraindata, 
{
    iterations: 4000,
    errorThresh: 0.042,
log: (status) => console.log(status)
}
             )
pin(newnenet.run("she has left"))

